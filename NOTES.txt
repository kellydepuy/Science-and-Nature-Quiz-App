make the answers unordered and random
data clean up for quotations



*******************************


results: Array(10)
0:
category: "Science & Nature"
correct_answer: "Fruit Flies "
difficulty: "medium"
incorrect_answers: (3) ['Monkey', 'Dog', 'Mouse']
question: "What was the first living creature in space?"
type: "multiple"
[[Prototype]]: Object
1: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'Which element has the atomic number of 7?', correct_answer: 'Nitrogen', …}
2: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'What polymer is used to make CDs, safety goggles and riot shields?', correct_answer: 'Polycarbonate', …}
3: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'What is the atomic number of the element Strontium?', correct_answer: '38', …}
4: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'The human right lung has how many lobes?', correct_answer: '3', …}
5: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'In Chemistry, how many isomers does Butanol (C4H9OH) have?', correct_answer: '4', …}
6: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'On the periodic table of elements, what is the symbol for Tin?', correct_answer: 'Sn', …}
7: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'Where did the Great Storm of 1987 make landfall at, first?', correct_answer: 'Cornwall', …}
8: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'What is Hypernatremia?', correct_answer: 'Increase in blood sodium', …}
9: {category: 'Science & Nature', type: 'multiple', difficulty: 'medium', question: 'When the Falcon Heavy was launched on it&#039;s te…t was the only part of the operation that failed?', correct_answer: 'Center Core Landing', …}
length: 10
[[Prototype]]: Array(0)
[[Prototype]]: Object




  // useEffect(() => async function fetchData() {
  //   try {
  //     const response = await fetch("https://jsonplaceholder.typicode.com/todos/1")
  //     if (response.ok) {
  //       const jsonResponse = await response.json()
  //       console.log(jsonResponse)
  //       setQuizData(jsonResponse)
  //     }
  //   } catch {
  //     console.log("There was an error.")
  //   }
  // }, [])



  //console.log(quizData)

  // const listOfQuestions = quizData.results.map(i => {
  //   return (<Question question={i.question} key={i.question} />) })

// function createQuestionArray() { 
//     const list = quizData.results.map((i) => {
//     return (<Question question={quizData.results[i].question} key={quizData.results[i].question} />) })
//     console.log(list)
//     return list
// }

// if (quizData[0]) {setListOfQuestions(createQuestionArray); console.log(listOfQuestions)}


  // const listOfQuestions = []

  // if (quizData) {
  // for (let i = 0; i < 10; i++) {
  //   listOfQuestions.push(<Question question={quizData.results[i].question} key={quizData.results[i].question}/>
  //   )}}


    // SPLICE CORRECT ANSWER INTO WRONG ANSWER AT RANDOM INDEX


  // const answers = {}

  // for (let i = 0; i > 10; i++) {
  //   let Answers = [...quizData.results[i].incorrect_answers + quizData.results[i].correct_answer]
    
  // }


  // let allAnswers = [...props.wrong, props.correct]
  // for (let i = allAnswers.length - 1; i > 0; i--) {
  //     const randomNum = Math.floor(Math.random() + (allAnswers.length - 1))
  //     [allAnswers[i], allAnswers[randomNum]] = [allAnswers[randomNum], allAnswers[i]] }


//console.log(listOfQuestions)






import Background from "./components/Background";
import StartMain from "./components/StartMain"
import {useEffect, useState} from "react"
import Question from './components/Question'

export default function App() {

  const [quizData, setQuizData] = useState({})

    useEffect(() => {
      fetch('https://opentdb.com/api.php?amount=10')
        .then((response) => {
          return response.json();
        })
        .then((data) => {
          setQuizData(data);
        });
    }, []);
    let mappedQuestion = []

   

    function mappingQuestions() {
      mappedQuestion = quizData.results.map(item =>
      <Question
      id={1}
      question={item.question}
      key={item.question}
      correct={item.correct_answer}
      wrong={item.incorrect_answers}
      onClick={handleAnswerClick}
      isClicked={false}
      />)
    }

    quizData.results && console.log(mappedQuestion)
    quizData.results && mappingQuestions()

    function handleAnswerClick(id) {
      
        // mappedQuestion.map(item => [...mappedQuestion, (mappedQuestion.item.id === id ? !mappedQuestion.item : mappedQuestion.item)])

    }
    return (
        <div className="App">
          <Background />
          <StartMain />
          {mappedQuestion}
     </div>
    );
  }

